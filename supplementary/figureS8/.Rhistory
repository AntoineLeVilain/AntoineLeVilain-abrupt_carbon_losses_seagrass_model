setwd("/Users/antoinelevilain/Desktop/doctorat/my_articles/second/abrupt_carbon_losses_seagrass_model/supplementary/figureS2")
# Data
data <- data.frame(
s = c(0.97, 0.81, 0.56, 0.27, 0.22, 0.16, 0.13),
hmax_rmax = c(9.090909091, 13.18181818, 17.27272727, 20.90909091, 24.54545455, 28.63636364, 32.72727273)
)
# Linear Regression with intercept set to 1
model <- lm(I(s-1) ~ hmax_rmax + 0, data=data)
# Print the estimated parameter
print(summary(model))
# Calculate 5% and 95% confidence intervals
conf_intervals <- confint(model, level = 0.90)  # Adjust the level as needed
print(conf_intervals)
# Extracting lower and upper bounds
lower_bound <- conf_intervals[1]
upper_bound <- conf_intervals[2]
x <- seq(0, 35, 1)
# Generating fitted values for the bounds
fitted_lower <- lower_bound*x + 1
fitted_upper <- upper_bound*x + 1
# Plotting
tiff("figureS2.tiff", units = 'in', width = 7, height = 5, res = 700)
plot(data$hmax_rmax, data$s,
xlab="H/0.011 (m s-1 day)", ylab="Seagras percent cover s", pch=19, col="blue", xlim=c(0, 35), ylim=c(0, 1), xaxs="i", yaxs="i")
abline(a=1, b=coef(model)[1], col="red")  # adds the linear regression line with intercept at 1
# Add lines for the confidence interval bounds
lines(x, fitted_lower, col="black", type="l")
lines(x, fitted_upper, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))
polygon(x_combined, y_combined, col="grey", border=NA)
# Re-draw the main fitted line and data points to overlay the grey area
abline(a=1, b=coef(model)[1], col="red")
points(data$hmax_rmax, data$s, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
plot(data$hmax_rmax, data$s,
xlab="H/0.011 (m s-1 day)", ylab="Seagras percent cover s", pch=19, col="blue", xlim=c(0, 35), ylim=c(0, 1), xaxs="i", yaxs="i")
abline(a=1, b=coef(model)[1], col="red")  # adds the linear regression line with intercept at 1
# Add lines for the confidence interval bounds
lines(x, fitted_lower, col="black", type="l")
lines(x, fitted_upper, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))
polygon(x_combined, y_combined, col="grey", border=NA)
# Re-draw the main fitted line and data points to overlay the grey area
abline(a=1, b=coef(model)[1], col="red")
points(data$hmax_rmax, data$s, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
setwd("/Users/antoinelevilain/Desktop/doctorat/my_articles/second/abrupt_carbon_losses_seagrass_model/supplementary/figureS3")
library(minpack.lm)
# Data
data <- data.frame(
p = c(0.08, 0.15, 0.39, 0.41),
h = c(0.05*22.7/(22.7+170), 0.05*22.7/(22.7+170), 0.1*22.7/(22.7+170), 0.1*22.7/(22.7+170))
)
# Define the function
my_fun <- function(h, hp) h / (h + hp)
# Initial estimates for the parameters
start_params <- c(hp = median(data$h))
# Lower bounds for the parameters
lower_bounds <- c(hp = 0)
# Fit the model with constraints
fit <- nlsLM(p ~ my_fun(h, hp),
data = data,
start = start_params,
lower = lower_bounds,
control = nls.lm.control(maxiter = 500))
print(summary(fit))
# Get the estimated parameters
estimated_params <- coef(fit)
# Print the estimated parameters
print(estimated_params)
# Calculate 5% and 95% confidence intervals
conf_intervals <- confint(fit, level = 0.90)  # Adjust the level as needed
print(conf_intervals)
# Extracting lower and upper bounds
lower_bound <- conf_intervals[1]
upper_bound <- conf_intervals[2]
x <- seq(0, 1, 0.0001)
# Generating fitted values for the bounds
fitted_lower <- x / (x + lower_bound)
fitted_upper <- x / (x + upper_bound)
tiff("figureS3.tiff", units = 'in', width = 7, height = 5, res = 700)
# Plot
plot(data$h, data$p,
xlab="Flow velocity H (m s-1)", ylab="Relative number of suspended particles P/Pmax", pch=19, col="blue", xlim=c(0, 0.5), ylim=c(0, 1), xaxs="i", yaxs="i")
lines(x, x/(x+estimated_params), col="red", type="l")
# Add lines for the confidence interval bounds
lines(x, fitted_lower, col="black", type="l")
lines(x, fitted_upper, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))
polygon(x_combined, y_combined, col="grey", border=NA)
# Re-draw the main fitted line and data points to overlay the grey area
lines(x, x/(x+estimated_params), col="red", type="l")
points(data$h, data$p, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
# Plot
plot(data$h, data$p,
xlab="Flow velocity H (m s-1)", ylab="Relative number of suspended particles P/Pmax", pch=19, col="blue", xlim=c(0, 0.5), ylim=c(0, 1), xaxs="i", yaxs="i")
lines(x, x/(x+estimated_params), col="red", type="l")
# Add lines for the confidence interval bounds
lines(x, fitted_lower, col="black", type="l")
lines(x, fitted_upper, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))
polygon(x_combined, y_combined, col="grey", border=NA)
# Re-draw the main fitted line and data points to overlay the grey area
lines(x, x/(x+estimated_params), col="red", type="l")
points(data$h, data$p, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
setwd("/Users/antoinelevilain/Desktop/doctorat/my_articles/second/abrupt_carbon_losses_seagrass_model/supplementary/figureS4")
# Data
data <- data.frame(
tss = c(3.8, 5.8, 6.0, 5.8, 6.3, 6.9, 7.1, 8.1, 9.1, 10.2, 10.3, 11.4, 12.9, 13.3, 11.8, 11.0, 18.1, 18.6, 19.2, 21.0, 32.8, 40.9),
k = c(1.09, 0.75, 0.98, 1.01, 1.26, 1.18, 1.38, 1.24, 1.38, 1.08, 1.50, 0.82, 0.81, 0.96, 1.91, 2.27, 2.40, 2.81, 1.98, 1.98, 2.62, 3.6)
)
# Linear Regression with intercept set to 1
model <- lm(I(k) ~ tss, data=data)
# Print the estimated parameter
print(summary(model))
# Calculate 5% and 95% confidence intervals
conf_intervals <- confint(model, level = 0.90)  # Adjust the level as needed
print(conf_intervals)
# Extracting lower and upper bounds
lower_bound <- conf_intervals[2, 1]
upper_bound <- conf_intervals[2, 2]
x <- seq(0, 50, 1)
# Generating fitted values for the bounds
fitted_lower <- lower_bound*x + conf_intervals[1, 1]
fitted_upper <- upper_bound*x + conf_intervals[1, 2]
# Plotting
tiff("figureS4.tiff", units = 'in', width = 7, height = 5, res = 700)
plot(data$tss, data$k,
xlab="Total suspended particles TSS (g m-3)", ylab="Light attenuation coefficient Kd (m-1)", pch=19, col="blue", xlim=c(0, 40), ylim=c(0, 5), xaxs="i", yaxs="i")
abline(a=coef(model)[1], b=coef(model)[2], col="red")  # adds the linear regression line with intercept at 1
# Add lines for the confidence interval bounds
lines(x, fitted_lower, col="black", type="l")
lines(x, fitted_upper, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))
polygon(x_combined, y_combined, col="grey", border=NA)
# Re-draw the main fitted line and data points to overlay the grey area
abline(a=coef(model)[1], b=coef(model)[2], col="red")
points(data$tss, data$k, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
plot(data$tss, data$k,
xlab="Total suspended particles TSS (g m-3)", ylab="Light attenuation coefficient Kd (m-1)", pch=19, col="blue", xlim=c(0, 40), ylim=c(0, 5), xaxs="i", yaxs="i")
abline(a=coef(model)[1], b=coef(model)[2], col="red")  # adds the linear regression line with intercept at 1
# Add lines for the confidence interval bounds
lines(x, fitted_lower, col="black", type="l")
lines(x, fitted_upper, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))
polygon(x_combined, y_combined, col="grey", border=NA)
# Re-draw the main fitted line and data points to overlay the grey area
abline(a=coef(model)[1], b=coef(model)[2], col="red")
points(data$tss, data$k, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
setwd("/Users/antoinelevilain/Desktop/doctorat/my_articles/second/abrupt_carbon_losses_seagrass_model/supplementary/figureS5")
# Data
data <- data.frame(
r = c(192, 128, 286, 328, 332, 333, 459, 536, 617, 756, 708),
io = c(0.46, 0.83, 0.61, 0.47, 1.03, 1.81, 1.51, 2.57, 2.41, 3.68, 4.35)
)
data <- data %>%
mutate(io = io/3600*1000000)
# Library
library(minpack.lm)
library(tidyverse)
# Data
data <- data.frame(
r = c(192, 128, 286, 328, 332, 333, 459, 536, 617, 756, 708),
io = c(0.46, 0.83, 0.61, 0.47, 1.03, 1.81, 1.51, 2.57, 2.41, 3.68, 4.35)
)
data <- data %>%
mutate(io = io/3600*1000000)
# Define the function
my_fun <- function(io, ir) 750*(io / (io + ir))
# Initial estimates for the parameters
start_params <- c(ir = median(data$io))
# Lower bounds for the parameters
lower_bounds <- c(io = 0)
# Fit the model with constraints
fit <- nlsLM(r ~ my_fun(io, ir),
data = data,
start = start_params,
lower = lower_bounds,
control = nls.lm.control(maxiter = 500))
print(summary(fit))
# Get the estimated parameters
estimated_params <- coef(fit)
# Print the estimated parameters
print(estimated_params)
# Calculate 5% and 95% confidence intervals
conf_intervals <- confint(fit, level = 0.90)  # Adjust the level as needed
print(conf_intervals)
# Extracting lower and upper bounds
lower_bound <- conf_intervals[1]
upper_bound <- conf_intervals[2]
x <- seq(0, 1000, 0.1)
# Generating fitted values for the bounds
fitted_lower <- 750*(x / (x + lower_bound))
fitted_upper <- 750*(x / (x + upper_bound))
tiff("figureS5.tiff", units = 'in', width = 7, height = 5, res = 700)
# Plot
plot(data$io, data$r,
xlab="Irradiance I (uE m-2 s-1)", ylab="Productivity P (ug C g DW-1 h-1)", pch=19, col="blue", xlim=c(0, 800), ylim=c(0, 800), xaxs="i", yaxs="i")
lines(x, 750*(x / (x + estimated_params)), col="red", type="l")
# Add lines for the confidence interval bounds
lines(x, fitted_lower, col="black", type="l")
lines(x, fitted_upper, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))
polygon(x_combined, y_combined, col="grey", border=NA)
# Re-draw the main fitted line and data points to overlay the grey area
lines(x, 750*(x / (x + estimated_params)), col="red", type="l")
points(data$io, data$r, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
# Plot
plot(data$io, data$r,
xlab="Irradiance I (uE m-2 s-1)", ylab="Productivity P (ug C g DW-1 h-1)", pch=19, col="blue", xlim=c(0, 800), ylim=c(0, 800), xaxs="i", yaxs="i")
lines(x, 750*(x / (x + estimated_params)), col="red", type="l")
# Add lines for the confidence interval bounds
lines(x, fitted_lower, col="black", type="l")
lines(x, fitted_upper, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))
polygon(x_combined, y_combined, col="grey", border=NA)
# Re-draw the main fitted line and data points to overlay the grey area
lines(x, 750*(x / (x + estimated_params)), col="red", type="l")
points(data$io, data$r, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
setwd("/Users/antoinelevilain/Desktop/doctorat/my_articles/second/abrupt_carbon_losses_seagrass_model/supplementary/figureS6")
# Data
data <- data.frame(
p = c(1, 0.9, 0.89, 0.80, 0.65, 0.54, 0.60, 0.57, 0.46, 0.45, 0.39, 0.40, 0.37, 0.27, 0.30, 0.33),
t = 0:15
)
# Define the function
my_fun <- function(t, a) exp(-a*t)
# Initial estimates for the parameters
start_params <- c(a = 0)
# Lower bounds for the parameters
lower_bounds <- c(a = 0)
# Fit the model with constraints
fit <- nlsLM(p ~ my_fun(t, a),
data = data,
start = start_params,
lower = lower_bounds,
control = nls.lm.control(maxiter = 500))
print(summary(fit))
# Get the estimated parameters
estimated_params <- coef(fit)
estimated_params/365
# Calculate 5% and 95% confidence intervals
conf_intervals <- confint(fit, level = 0.90)  # Adjust the level as needed
conf_intervals/365
# Extracting lower and upper bounds
lower_bound <- conf_intervals[1]
upper_bound <- conf_intervals[2]
x <- seq(0, 15, 0.01)
# Generating fitted values for the bounds
fitted_lower <- exp(-lower_bound*x)*100
fitted_upper <- exp(-upper_bound*x)*100
tiff("figureS6.tiff", units = 'in', width = 7, height = 5, res = 700)
# Plot
plot(data$t, data$p*100,
xlab="Years", ylab="Remaining weight (%)", pch=19, col="blue", xlim=c(0, 16), ylim=c(0, 105), xaxs="i", yaxs="i")
lines(x, exp(-estimated_params*x)*100, col="red", type="l")
# Add lines for the confidence interval bounds
lines(x, fitted_lower, col="black", type="l")
lines(x, fitted_upper, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))
polygon(x_combined, y_combined, col="grey", border=NA)
# Re-draw the main fitted line and data points to overlay the grey area
lines(x, exp(-estimated_params*x)*100, col="red", type="l")
points(data$t, data$p*100, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
plot(data$t, data$p*100,
xlab="Years", ylab="Remaining weight (%)", pch=19, col="blue", xlim=c(0, 16), ylim=c(0, 105), xaxs="i", yaxs="i")
lines(x, exp(-estimated_params*x)*100, col="red", type="l")
# Add lines for the confidence interval bounds
lines(x, fitted_lower, col="black", type="l")
lines(x, fitted_upper, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))
polygon(x_combined, y_combined, col="grey", border=NA)
# Re-draw the main fitted line and data points to overlay the grey area
lines(x, exp(-estimated_params*x)*100, col="red", type="l")
points(data$t, data$p*100, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
setwd("/Users/antoinelevilain/Desktop/doctorat/my_articles/second/abrupt_carbon_losses_seagrass_model/supplementary/figureS7")
# Data
data <- data.frame(
corg = c(0.0043, 0.0051, 0.0067, 0.0118, 0.0128, 0.0113, 0.0255),
h = c(0.05, 0.07, 0.1, 0.15, 0.17, 0.21, 0.26)
)
# Define the function
my_fun <- function(h, hea) h / (h + hea)
# Initial estimates for the parameters
start_params <- c(hea = median(data$h))
# Lower bounds for the parameters
lower_bounds <- c(hea = 0)
# Fit the model with constraints
fit <- nlsLM(corg ~ my_fun(h, hea),
data = data,
start = start_params,
lower = lower_bounds,
control = nls.lm.control(maxiter = 500))
print(summary(fit))
# Get the estimated parameters
estimated_params <- coef(fit)
# Print the estimated parameters
print(estimated_params)
# Calculate 5% and 95% confidence intervals
conf_intervals <- confint(fit, level = 0.90)  # Adjust the level as needed
print(conf_intervals)
# Extracting lower and upper bounds
lower_bound <- conf_intervals[1]
upper_bound <- conf_intervals[2]
x <- seq(0, 5, 0.01)
# Generating fitted values for the bounds
fitted_lower <- x / (x + lower_bound)
fitted_upper <- x / (x + upper_bound)
tiff("figureS7.tiff", units = 'in', width = 7, height = 5, res = 700)
plot(data$h, data$corg*100,
xlab="Flow velocity H (m s-1)", ylab="Corg lost dCA/(CAdt) (%)", pch=19, col="blue", xlim=c(0, 0.3), ylim=c(0, 10), xaxs="i", yaxs="i")
lines(x, x/(x+estimated_params)*100, col="red", type="l")
# Add lines for the confidence interval bounds
lines(x, fitted_lower*100, col="black", type="l")
lines(x, fitted_upper*100, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))*100
polygon(x_combined, y_combined, col="grey", border=NA)
lines(x, x/(x+estimated_params)*100, col="red", type="l")
points(data$h, data$corg*100, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
plot(data$h, data$corg*100,
xlab="Flow velocity H (m s-1)", ylab="Corg lost dCA/(CAdt) (%)", pch=19, col="blue", xlim=c(0, 0.3), ylim=c(0, 10), xaxs="i", yaxs="i")
lines(x, x/(x+estimated_params)*100, col="red", type="l")
# Add lines for the confidence interval bounds
lines(x, fitted_lower*100, col="black", type="l")
lines(x, fitted_upper*100, col="black", type="l")
# Create a polygon to fill the area between the lower and upper bounds
x_combined <- c(x, rev(x))  # Combine and reverse x for a closed shape
y_combined <- c(fitted_lower, rev(fitted_upper))*100
polygon(x_combined, y_combined, col="grey", border=NA)
lines(x, x/(x+estimated_params)*100, col="red", type="l")
points(data$h, data$corg*100, pch=19, col="blue")
legend("topright", legend=c("Data points", "Fitted function", "95% CI"), pch=19, col=c("blue", "red", "grey"), bty="n")
setwd("/Users/antoinelevilain/Desktop/doctorat/my_articles/second/abrupt_carbon_losses_seagrass_model/supplementary/figureS8")
library(minpack.lm)
library(readxl)
library(tidyverse)
data <- read_excel("data_arrhenius.xlsx")
data <- data %>%
select(T, CO2, Treatment, Replica)
data <- data %>%
mutate(CO2 = CO2*0.000001*12.01*86400) %>%
mutate(T = T + 273.15) %>%
mutate(CO2 = log(CO2)) %>%
mutate(T = -1/(8.314*T))
pre_exponential <- c()
energy_activation <- c()
for (i in unique(data$Treatment)){
subset <- data %>%
filter(Treatment == i)
for (j in unique(subset$Replica)){
subset_2 <- subset %>%
filter(Replica == j)
model <- lm(I(CO2) ~ T, data=subset_2)
pre_exponential <- c(pre_exponential, model$coefficients[1])
energy_activation <- c(energy_activation, model$coefficients[2])
}
}
ea <- mean(energy_activation)
data <- read_excel("data_arrhenius.xlsx")
ea <- 58000
ea1 <- 48000
ea2 <- 68000
x <- seq(288.15, 305.15, 0.1)
tiff("FIGURES8.tiff", units = 'in', width = 7, height = 5, res = 700)
plot(x, exp(-ea/(8.314*x))*0.99/(exp(-ea/(8.314*303.65))), xlab = "Temperature (K)", ylab = "Relative decomposition rate", type = 'l', col = "red", ylim = c(0, 1.1), xaxs="i", yaxs="i")
lines(x, exp(-ea1/(8.314*x))*0.99/(exp(-ea1/(8.314*302.15))), col="black", type="l")
lines(x, exp(-ea2/(8.314*x))*0.99/(exp(-ea2/(8.314*305.15))), col="black", type="l")
x_combined <- c(x, rev(x))
y_combined <- c(exp(-ea2/(8.314*x))*0.99/(exp(-ea2/(8.314*305.15))), rev(exp(-ea1/(8.314*x))*0.99/(exp(-ea1/(8.314*302.15)))))
polygon(x_combined, y_combined, col="grey", border=NA)
lines(x, exp(-ea/(8.314*x))*0.99/(exp(-ea/(8.314*303.65))), col="red", type="l")
legend("topright", legend=c("Fitted function", "Uncertainty"), pch=19, col=c("red", "grey"), bty="n")
plot(x, exp(-ea/(8.314*x))*0.99/(exp(-ea/(8.314*303.65))), xlab = "Temperature (K)", ylab = "Relative decomposition rate", type = 'l', col = "red", ylim = c(0, 1.1), xaxs="i", yaxs="i")
lines(x, exp(-ea1/(8.314*x))*0.99/(exp(-ea1/(8.314*302.15))), col="black", type="l")
lines(x, exp(-ea2/(8.314*x))*0.99/(exp(-ea2/(8.314*305.15))), col="black", type="l")
x_combined <- c(x, rev(x))
y_combined <- c(exp(-ea2/(8.314*x))*0.99/(exp(-ea2/(8.314*305.15))), rev(exp(-ea1/(8.314*x))*0.99/(exp(-ea1/(8.314*302.15)))))
polygon(x_combined, y_combined, col="grey", border=NA)
lines(x, exp(-ea/(8.314*x))*0.99/(exp(-ea/(8.314*303.65))), col="red", type="l")
legend("topright", legend=c("Fitted function", "Uncertainty"), pch=19, col=c("red", "grey"), bty="n")
data <- read_excel("co2_temperature.xlsx")
data <- data %>%
select(T, CO2, Treatment, Replica)
data <- data %>%
mutate(CO2 = CO2*0.000001*12.01*86400) %>%
mutate(T = T + 273.15) %>%
mutate(CO2 = log(CO2)) %>%
mutate(T = -1/(8.314*T))
pre_exponential <- c()
energy_activation <- c()
for (i in unique(data$Treatment)){
subset <- data %>%
filter(Treatment == i)
for (j in unique(subset$Replica)){
subset_2 <- subset %>%
filter(Replica == j)
model <- lm(I(CO2) ~ T, data=subset_2)
pre_exponential <- c(pre_exponential, model$coefficients[1])
energy_activation <- c(energy_activation, model$coefficients[2])
}
}
ea <- mean(energy_activation)
data <- read_excel("co2_temperature.xlsx")
ea <- 58000
ea1 <- 48000
ea2 <- 68000
x <- seq(288.15, 305.15, 0.1)
tiff("FigureS8.tiff", units = 'in', width = 7, height = 5, res = 700)
plot(x, exp(-ea/(8.314*x))*0.99/(exp(-ea/(8.314*303.65))), xlab = "Temperature (K)", ylab = "Relative decomposition rate", type = 'l', col = "red", ylim = c(0, 1.1), xaxs="i", yaxs="i")
lines(x, exp(-ea1/(8.314*x))*0.99/(exp(-ea1/(8.314*302.15))), col="black", type="l")
lines(x, exp(-ea2/(8.314*x))*0.99/(exp(-ea2/(8.314*305.15))), col="black", type="l")
x_combined <- c(x, rev(x))
y_combined <- c(exp(-ea2/(8.314*x))*0.99/(exp(-ea2/(8.314*305.15))), rev(exp(-ea1/(8.314*x))*0.99/(exp(-ea1/(8.314*302.15)))))
polygon(x_combined, y_combined, col="grey", border=NA)
lines(x, exp(-ea/(8.314*x))*0.99/(exp(-ea/(8.314*303.65))), col="red", type="l")
legend("topright", legend=c("Fitted function", "Uncertainty"), pch=19, col=c("red", "grey"), bty="n")
plot(x, exp(-ea/(8.314*x))*0.99/(exp(-ea/(8.314*303.65))), xlab = "Temperature (K)", ylab = "Relative decomposition rate", type = 'l', col = "red", ylim = c(0, 1.1), xaxs="i", yaxs="i")
lines(x, exp(-ea1/(8.314*x))*0.99/(exp(-ea1/(8.314*302.15))), col="black", type="l")
lines(x, exp(-ea2/(8.314*x))*0.99/(exp(-ea2/(8.314*305.15))), col="black", type="l")
x_combined <- c(x, rev(x))
y_combined <- c(exp(-ea2/(8.314*x))*0.99/(exp(-ea2/(8.314*305.15))), rev(exp(-ea1/(8.314*x))*0.99/(exp(-ea1/(8.314*302.15)))))
polygon(x_combined, y_combined, col="grey", border=NA)
lines(x, exp(-ea/(8.314*x))*0.99/(exp(-ea/(8.314*303.65))), col="red", type="l")
legend("topright", legend=c("Fitted function", "Uncertainty"), pch=19, col=c("red", "grey"), bty="n")
