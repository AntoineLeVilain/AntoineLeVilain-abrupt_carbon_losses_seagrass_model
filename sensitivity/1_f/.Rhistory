color = gradient_colors[which(unique(get(par1)$sh) == j)], size = 1, linetype = "dashed"))
assign(paste0("plot_", par1, "_", index, "_", j), get(paste0("plot_", par1, "_", index, "_", j)) +
geom_line(data = get(paste0(par1, j, "bare")), aes(x = get(par1), y = get(paste0(index, "_bare"))),
color = gradient_colors[which(unique(get(par1)$sh) == j)], size = 1, linetype = "solid"))
} else if (index == "CB") {
assign(paste0("plot_", par1, "_C_", j), ggplot() +
geom_line(data = get(paste0(par1, j, "seagrass")),
aes(x = get(par1), y = get("CB_seagrass")),
color = gradient_colors[which(unique(get(par1)$sh) == j)], size = 1, linetype = "solid") +
xlab(par1) + ylab(index) + theme_classic() + theme(legend.position = "none"))
assign(paste0("plot_", par1, "_C_", j), get(paste0("plot_", par1, "_C_", j)) +
geom_line(data = get(paste0(par1, j, "bistable")), aes(x = get(par1), y = get("CB_bistable")),
color = gradient_colors[which(unique(get(par1)$sh) == j)], size = 1, linetype = "dashed"))
assign(paste0("plot_", par1, "_C_", j), get(paste0("plot_", par1, "_C_", j)) +
geom_line(data = get(paste0(par1, j, "bare")), aes(x = get(par1), y = get("CB_bare")),
color = gradient_colors[which(unique(get(par1)$sh) == j)], size = 1, linetype = "solid"))
} else {
assign(paste0("plot_", par1, "_CA_CS_", j), ggplot() +
geom_line(data = get(paste0(par1, j, "seagrass")),
aes(x = get(par1), y = get("CA_seagrass")),
color = "orange", size = 1, linetype = "solid") +
xlab(par1) + ylab(index) + theme_classic() + theme(legend.position = "none"))
assign(paste0("plot_", par1, "_CA_CS_", j), get(paste0("plot_", par1, "_CA_CS_", j)) +
geom_line(data = get(paste0(par1, j, "seagrass")),
aes(x = get(par1), y = get("CS_seagrass")),
color = "green", size = 1, linetype = "solid") +
xlab(par1) + ylab(index) + theme_classic() + theme(legend.position = "none"))
assign(paste0("plot_", par1, "_CA_CS_", j), get(paste0("plot_", par1, "_CA_CS_", j)) +
geom_line(data = get(paste0(par1, j, "bistable")), aes(x = get(par1), y = get("CA_bistable")),
color = "orange", size = 1, linetype = "dashed"))
assign(paste0("plot_", par1, "_CA_CS_", j), get(paste0("plot_", par1, "_CA_CS_", j)) +
geom_line(data = get(paste0(par1, j, "bistable")), aes(x = get(par1), y = get("CS_bistable")),
color = "green", size = 1, linetype = "dashed"))
assign(paste0("plot_", par1, "_CA_CS_", j), get(paste0("plot_", par1, "_CA_CS_", j)) +
geom_line(data = get(paste0(par1, j, "bare")), aes(x = get(par1), y = get("CA_bare")),
color = "orange", size = 1, linetype = "solid"))
assign(paste0("plot_", par1, "_CA_CS_", j), get(paste0("plot_", par1, "_CA_CS_", j)) +
geom_line(data = get(paste0(par1, j, "bare")), aes(x = get(par1), y = get("CS_bare")),
color = "green", size = 1, linetype = "solid"))
}
}
}
}
#feedback
plot_ma_C_f <- ggplot() + geom_line(data = ma22.7seagrass,
aes(x = ma, y = CB_seagrass),
color = gradient_colors[1], size = 1, linetype = "solid") + xlab("ma") + ylab("CB") + theme_classic() + theme(legend.position = "none")
plot_ma_C_f <- plot_ma_C_f + geom_line(data = ma22.7bistable,
aes(x = ma, y = CB_bistable),
color = gradient_colors[1], size = 1, linetype = "dashed")
plot_ma_C_f <- plot_ma_C_f + geom_line(data = ma22.7bare,
aes(x = ma, y = CB_bare),
color = gradient_colors[1], size = 1, linetype = "solid")
ggsave("plot_ma_CB_f.png",
plot_ma_C_f,
width = 5, height = 3)
plot_pmax_C_f <- ggplot() + geom_line(data = pmax22.7seagrass,
aes(x = pmax, y = CB_seagrass),
color = gradient_colors[1], size = 1, linetype = "solid") + xlab("pmax") + ylab("CB") + theme_classic() + theme(legend.position = "none")
plot_pmax_C_f <- plot_pmax_C_f + geom_line(data = pmax22.7bistable,
aes(x = pmax, y = CB_bistable),
color = gradient_colors[1], size = 1, linetype = "dashed")
plot_pmax_C_f <- plot_pmax_C_f + geom_line(data = pmax22.7bare,
aes(x = pmax, y = CB_bare),
color = gradient_colors[1], size = 1, linetype = "solid")
ggsave("plot_pmax_CB_f.png",
plot_pmax_C_f,
width = 5, height = 3)
plot_temp_C_f <- ggplot() + geom_line(data = temp22.7seagrass,
aes(x = temp, y = CB_seagrass),
color = gradient_colors[1], size = 1, linetype = "solid") + xlab("temp") + ylab("CB") + theme_classic() + theme(legend.position = "none")
plot_temp_C_f <- plot_temp_C_f + geom_line(data = temp22.7bistable,
aes(x = temp, y = CB_bistable),
color = gradient_colors[1], size = 1, linetype = "dashed")
plot_temp_C_f <- plot_temp_C_f + geom_line(data = temp22.7bare,
aes(x = temp, y = CB_bare),
color = gradient_colors[1], size = 1, linetype = "solid")
ggsave("plot_temp_CB_f.png",
plot_temp_C_f,
width = 5, height = 3)
#no feedback
plot_ma_C_nf <- ggplot() + geom_line(data = `ma1e+06seagrass`,
aes(x = ma, y = CB_seagrass),
color = gradient_colors[2], size = 1, linetype = "solid") + xlab("ma") + ylab("CB") + theme_classic() + theme(legend.position = "none")
plot_ma_C_nf <- plot_ma_C_nf + geom_line(data = `ma1e+06bare`,
aes(x = ma, y = CB_bare),
color = gradient_colors[2], size = 1, linetype = "solid")
ggsave("plot_ma_CB_nf.png",
plot_ma_C_nf,
width = 5, height = 3)
# working directory
setwd('/Users/antoinelevilain/Desktop/doctorat/my_articles/second/second_article/figures/sens_all_the_way') # set your own working directory
# requirements
package_list <- c("ggplot2", "readxl", "dplyr", "scales")
for (package in package_list){
library(package, character.only = TRUE)
}
# model
model <- function(x){
S <- rmax*((tmax - temp)/(tmax - topt))*((temp/topt)^(topt/(tmax - topt)))*x[5]/(x[5] + nr)*(i0*exp(-a*pmax*z)/(i0*exp(-a*pmax*z) + ir))*x[1] - x[1]*(ms + ma + mh*hmax*sh/(sh + x[1]))
CA <- alpha*h*pmax*(1 - (hmax*sh/(sh + x[1]))/(hmax*sh/(sh + x[1]) + hp)) - x[2]*(phida*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp)) + (hmax*sh/(sh + x[1]))/(hmax*sh/(sh + x[1]) + hea) + 1/(1+exp(-fb1*(x[2] + x[3] - fb2))))
CS <- beta*x[1]*(ms + ma + mh*hmax*sh/(sh + x[1])) - x[3]*(phids*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp)) + (hmax*sh/(sh + x[1]))/(hmax*sh/(sh + x[1]) + hes) + 1/(1+exp(-fb1*(x[2] + x[3] - fb2))))
CB <- x[2]*1/(1+exp(-fb1*(x[2] + x[3] - fb2))) + x[3]*1/(1+exp(-fb1*(x[2] + x[3] - fb2))) - x[4]*phidb*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp))
N <- i + gamma*(x[2]*phida*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp)) + x[3]*phids*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp)) + x[4]*phidb*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp))) - delta*(rmax*((tmax - temp)/(tmax - topt))*((temp/topt)^(topt/(tmax - topt)))*x[5]/(x[5] + nr)*(i0*exp(-a*pmax*z))/(i0*exp(-a*pmax*z) + ir))*x[1]-l*x[5]
c(S = S, CA = CA, CS = CS, CB = CB, N = N)
}
# parameter values
rmax <- 0.011
ms <- 0.0014
topt <- 298.85
tmax <- 307.05
nr <- 0.015
i0 <- 709
ir <- 296
sh <- 22.7
hp <- 0.023
a <- 0.07
mh <- 0.028
alpha <- 0.194
h <- 0.68
phida <- 0.024
phids <- 0.00024
phidb <- 0.00005
ea <- 58000
r <- 8.314
td <- 303.65
hea <- 12.53
hes <- 12.53
fb1 <- 0.0022
fb2 <- 1335
beta <- 0.292
gamma <- 0.137
delta <- 0.052
l <- 0.01
z <- 20
temp <- 298.85
hmax <- 0.05
pmax <- 0.5
ma <- 0
i <- 0.02
data <- read.csv("ma_sh.csv")
# plot 1
for (j in unique(data$sh)){
for (par1 in c("ma", "pmax", "temp")){
assign(par1, read.csv(paste0(par1, "_sh.csv"), header = TRUE))
# Define your start and end colors
color_start = "#FF0000"  # Red
color_end = "#0000FF"    # Blue
# Create a color ramp function
color_func = colorRampPalette(c(color_start, color_end))
# Generate the gradient colors
gradient_colors = color_func(length(unique(get(par1)$sh)))
assign(paste0(par1, j, "seagrass"), get(par1) %>%
filter(sh == j) %>%
filter(stability == "seagrass" | stability == "bistable"))
assign(paste0(par1, j, "bistable"), get(par1) %>%
filter(sh == j) %>%
filter(stability == "bistable"))
assign(paste0(par1, j, "bare"), get(par1) %>%
filter(sh == j) %>%
filter(stability == "bare" | stability == "bistable"))
if (nrow(get(paste0(par1, j, "bistable"))) == 0){
# Add first row of bare df to seagrass df
bare_first_row <- slice(get(paste0(par1, j, "bare")), 1)
assign(paste0(par1, j, "seagrass"), get(paste0(par1, j, "seagrass")) %>% add_row(bare_first_row))
# Swap column values
df <- get(paste0(par1, j, "seagrass"))
df[nrow(df), paste0("S", "_seagrass")] <- df[nrow(df), paste0("S", "_bare")]
df[nrow(df), paste0("CA", "_seagrass")] <- df[nrow(df), paste0("CA", "_bare")]
df[nrow(df), paste0("CS", "_seagrass")] <- df[nrow(df), paste0("CS", "_bare")]
df[nrow(df), paste0("CB", "_seagrass")] <- df[nrow(df), paste0("CB", "_bare")]
df[nrow(df), paste0("N", "_seagrass")] <- df[nrow(df), paste0("N", "_bare")]
assign(paste0(par1, j, "seagrass"), df)
}
for (index in c("S", "CB", "CA_CS")){
if (index == "S"){
assign(paste0("plot_", par1, "_", index, "_", j), ggplot() +
geom_line(data = get(paste0(par1, j, "seagrass")),
aes(x = get(par1), y = get(paste0(index, "_seagrass"))),
color = gradient_colors[which(unique(get(par1)$sh) == j)], size = 1, linetype = "solid") +
xlab(par1) + ylab(index) + theme_classic() + theme(legend.position = "none"))
assign(paste0("plot_", par1, "_", index, "_", j), get(paste0("plot_", par1, "_", index, "_", j)) +
geom_line(data = get(paste0(par1, j, "bistable")), aes(x = get(par1), y = get(paste0(index, "_bistable"))),
color = gradient_colors[which(unique(get(par1)$sh) == j)], size = 1, linetype = "dashed"))
assign(paste0("plot_", par1, "_", index, "_", j), get(paste0("plot_", par1, "_", index, "_", j)) +
geom_line(data = get(paste0(par1, j, "bare")), aes(x = get(par1), y = get(paste0(index, "_bare"))),
color = gradient_colors[which(unique(get(par1)$sh) == j)], size = 1, linetype = "solid"))
} else if (index == "CB") {
assign(paste0("plot_", par1, "_C_", j), ggplot() +
geom_line(data = get(paste0(par1, j, "seagrass")),
aes(x = get(par1), y = get("CB_seagrass")),
color = gradient_colors[which(unique(get(par1)$sh) == j)], size = 1, linetype = "solid") +
xlab(par1) + ylab(index) + theme_classic() + theme(legend.position = "none"))
assign(paste0("plot_", par1, "_C_", j), get(paste0("plot_", par1, "_C_", j)) +
geom_line(data = get(paste0(par1, j, "bistable")), aes(x = get(par1), y = get("CB_bistable")),
color = gradient_colors[which(unique(get(par1)$sh) == j)], size = 1, linetype = "dashed"))
assign(paste0("plot_", par1, "_C_", j), get(paste0("plot_", par1, "_C_", j)) +
geom_line(data = get(paste0(par1, j, "bare")), aes(x = get(par1), y = get("CB_bare")),
color = gradient_colors[which(unique(get(par1)$sh) == j)], size = 1, linetype = "solid"))
} else {
assign(paste0("plot_", par1, "_CA_CS_", j), ggplot() +
geom_line(data = get(paste0(par1, j, "seagrass")),
aes(x = get(par1), y = get("CA_seagrass")),
color = "orange", size = 1, linetype = "solid") +
xlab(par1) + ylab(index) + theme_classic() + theme(legend.position = "none"))
assign(paste0("plot_", par1, "_CA_CS_", j), get(paste0("plot_", par1, "_CA_CS_", j)) +
geom_line(data = get(paste0(par1, j, "seagrass")),
aes(x = get(par1), y = get("CS_seagrass")),
color = "green", size = 1, linetype = "solid") +
xlab(par1) + ylab(index) + theme_classic() + theme(legend.position = "none"))
assign(paste0("plot_", par1, "_CA_CS_", j), get(paste0("plot_", par1, "_CA_CS_", j)) +
geom_line(data = get(paste0(par1, j, "bistable")), aes(x = get(par1), y = get("CA_bistable")),
color = "orange", size = 1, linetype = "dashed"))
assign(paste0("plot_", par1, "_CA_CS_", j), get(paste0("plot_", par1, "_CA_CS_", j)) +
geom_line(data = get(paste0(par1, j, "bistable")), aes(x = get(par1), y = get("CS_bistable")),
color = "green", size = 1, linetype = "dashed"))
assign(paste0("plot_", par1, "_CA_CS_", j), get(paste0("plot_", par1, "_CA_CS_", j)) +
geom_line(data = get(paste0(par1, j, "bare")), aes(x = get(par1), y = get("CA_bare")),
color = "orange", size = 1, linetype = "solid"))
assign(paste0("plot_", par1, "_CA_CS_", j), get(paste0("plot_", par1, "_CA_CS_", j)) +
geom_line(data = get(paste0(par1, j, "bare")), aes(x = get(par1), y = get("CS_bare")),
color = "green", size = 1, linetype = "solid"))
}
}
}
}
#feedback
plot_ma_C_f <- ggplot() + geom_line(data = ma22.7seagrass,
aes(x = ma, y = CB_seagrass),
color = gradient_colors[1], size = 1, linetype = "solid") + xlab("ma") + ylab("CB") + theme_classic() + theme(legend.position = "none")
plot_ma_C_f <- plot_ma_C_f + geom_line(data = ma22.7bistable,
aes(x = ma, y = CB_bistable),
color = gradient_colors[1], size = 1, linetype = "dashed")
plot_ma_C_f <- plot_ma_C_f + geom_line(data = ma22.7bare,
aes(x = ma, y = CB_bare),
color = gradient_colors[1], size = 1, linetype = "solid")
ggsave("plot_ma_CB_f.png",
plot_ma_C_f,
width = 5, height = 3)
plot_pmax_C_f <- ggplot() + geom_line(data = pmax22.7seagrass,
aes(x = pmax, y = CB_seagrass),
color = gradient_colors[1], size = 1, linetype = "solid") + xlab("pmax") + ylab("CB") + theme_classic() + theme(legend.position = "none")
plot_pmax_C_f <- plot_pmax_C_f + geom_line(data = pmax22.7bistable,
aes(x = pmax, y = CB_bistable),
color = gradient_colors[1], size = 1, linetype = "dashed")
plot_pmax_C_f <- plot_pmax_C_f + geom_line(data = pmax22.7bare,
aes(x = pmax, y = CB_bare),
color = gradient_colors[1], size = 1, linetype = "solid")
ggsave("plot_pmax_CB_f.png",
plot_pmax_C_f,
width = 5, height = 3)
plot_temp_C_f <- ggplot() + geom_line(data = temp22.7seagrass,
aes(x = temp, y = CB_seagrass),
color = gradient_colors[1], size = 1, linetype = "solid") + xlab("temp") + ylab("CB") + theme_classic() + theme(legend.position = "none")
plot_temp_C_f <- plot_temp_C_f + geom_line(data = temp22.7bistable,
aes(x = temp, y = CB_bistable),
color = gradient_colors[1], size = 1, linetype = "dashed")
plot_temp_C_f <- plot_temp_C_f + geom_line(data = temp22.7bare,
aes(x = temp, y = CB_bare),
color = gradient_colors[1], size = 1, linetype = "solid")
ggsave("plot_temp_CB_f.png",
plot_temp_C_f,
width = 5, height = 3)
#no feedback
plot_ma_C_nf <- ggplot() + geom_line(data = `ma1e+06seagrass`,
aes(x = ma, y = CB_seagrass),
color = gradient_colors[2], size = 1, linetype = "solid") + xlab("ma") + ylab("CB") + theme_classic() + theme(legend.position = "none")
plot_ma_C_nf <- plot_ma_C_nf + geom_line(data = `ma1e+06bare`,
aes(x = ma, y = CB_bare),
color = gradient_colors[2], size = 1, linetype = "solid")
ggsave("plot_ma_CB_nf.png",
plot_ma_C_nf,
width = 5, height = 3)
plot_pmax_C_nf <- ggplot() + geom_line(data = `pmax1e+06seagrass`,
aes(x = pmax, y = CB_seagrass),
color = gradient_colors[2], size = 1, linetype = "solid") + xlab("pmax") + ylab("CB") + theme_classic() + theme(legend.position = "none")
plot_pmax_C_nf <- plot_pmax_C_nf + geom_line(data = `pmax1e+06bare`,
aes(x = pmax, y = CB_bare),
color = gradient_colors[2], size = 1, linetype = "solid")
ggsave("plot_pmax_CB_nf.png",
plot_pmax_C_nf,
width = 5, height = 3)
plot_temp_C_nf <- ggplot() + geom_line(data = `temp1e+06seagrass`,
aes(x = temp, y = CB_seagrass),
color = gradient_colors[2], size = 1, linetype = "solid") + xlab("temp") + ylab("CB") + theme_classic() + theme(legend.position = "none")
plot_temp_C_nf <- plot_temp_C_nf + geom_line(data = `temp1e+06bare`,
aes(x = temp, y = CB_bare),
color = gradient_colors[2], size = 1, linetype = "solid")
ggsave("plot_temp_CB_nf.png",
plot_temp_C_nf,
width = 5, height = 3)
#ld_healthy
setwd('/Users/antoinelevilain/Desktop/doctorat/my_articles/second/abrupt_carbon_losses_seagrass_model/sensitivity/1_f') # set your working directory
# Requirements
package_list <- c("sensobol", "data.table", "ggplot2", "deSolve", "foreach", "parallel", "readxl", "doParallel", "rootSolve", "dplyr", "rlang", "pracma", "matrixcalc", "data.table", "nleqslv")
for (package in package_list){
if (!require(package, character.only = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE)
}
# Second solver in case the first one does not work
multisolve2 <- function(model, lower_limit, upper_limit, iter) {
# model is the model whose equilibria you want to find (function INPUT = list of variables, OUTPUT = list of dynamics)
# lower_limit is a list of all lower limits of all initial values for all dimensions (LIST)
# upper_limit is a list of all upper limits of all initial values for all dimensions (LIST)
# iter is the number of iteration for each dimension, total number of iterations is iter^dimensions (NUMERIC)
# Initialize an empty dataframe to store equilibria
equilibrium <- data.frame(matrix(0, ncol = length(model(0)), nrow = 1))
colnames(equilibrium) <- names(model(0))
# Generate sequences for each dimension based on the lower and upper limits
lower_upper_list <- lapply(1:length(lower_limit), function(i) seq(lower_limit[i], upper_limit[i], length.out = iter))
# Generate all possible combinations of the sequences
combinations <- expand.grid(lower_upper_list)
colnames(combinations) <- names(model(0))
combinations <- rbind(rep(0, length(lower_limit)), combinations) # Add a row of zeros
# Iterate over each combination
for (i in 1:dim(combinations)[1]) {
solutions_found <- FALSE # Flag to check if solution was found without error
# Try to find the root using multiroot
tryCatch({
solutions <- multiroot(f = model, start = as.numeric(combinations[i, ]), positive = TRUE, useFortran = TRUE)
solutions_found <- TRUE
},
warning = function(w) {
# Silently handle warnings
},
error = function(e) {
# Silently handle errors
})
# If no solution found, skip to the next iteration
if (!solutions_found) {
next
}
# If first iteration, save the root directly
if (i == 1) {
equilibrium[1, ] <- solutions$root
} else {
# For subsequent iterations, check if the solution has been found before
for (j in 1:dim(equilibrium)[2]) {
if (j == 1) {
current <- equilibrium %>%
filter((solutions$root[j] * 0.99 - max(upper_limit) * 0.0001) <= (!!sym(colnames(equilibrium)[j]))) %>%
filter((!!sym(colnames(equilibrium)[j])) <= (solutions$root[j] * 1.01 + max(upper_limit) * 0.0001))
} else {
current <- current %>%
filter((solutions$root[j] * 0.99 - max(upper_limit) * 0.0001) <= (!!sym(colnames(equilibrium)[j]))) %>%
filter((!!sym(colnames(equilibrium)[j])) <= (solutions$root[j] * 1.01 + max(upper_limit) * 0.0001))
}
}
# If solution is not already in the list, add it to the equilibrium dataframe
if (dim(current)[1] == 0) {
equilibrium <- rbind(equilibrium, solutions$root)
}
}
}
# Return the equilibrium solutions, rounded to two decimal places
return(round(equilibrium, 2))
}
# Solver for the asymptotic dynamics
multisolve <- function(model, lower_limit, upper_limit, iter) {
# model is the model whose equilibria you want to find (function INPUT = list of variables, OUTPUT = list of dynamics)
# lower_limit is a list of all lower limits of all initial values for all dimensions (LIST)
# upper_limit is a list of all upper limits of all initial values for all dimensions (LIST)
# iter is the number of iteration for each dimension, total number of iterations is iter^dimensions (NUMERIC)
# Generate sequences for each dimension based on the lower and upper limits
lower_upper_list <- lapply(1:length(lower_limit), function(i) seq(lower_limit[i], upper_limit[i], length.out = iter))
# Generate all possible combinations of the sequences
combinations <- expand.grid(lower_upper_list)
colnames(combinations) <- names(model(0))
combinations <- rbind(rep(0, length(lower_limit)), combinations) # Add a row of zeros
# Solve for each combination
equilibrium <- searchZeros(as.matrix(combinations), fn = model, control = list(xtol = 10e-10, ftol = 10e-10, allowSingular=TRUE))$x
if (is.null(equilibrium)){
equilibrium <- multisolve2(model, lower_limit, upper_limit, iter)
}
equilibrium <- round(as.data.frame(equilibrium), 2)
equilibrium <- equilibrium %>%
select_if(is.numeric) %>%
filter(apply(., 1, function(x) all(x >= 0)))
equilibrium <- distinct(equilibrium)
# Return the equilibrium solutions, rounded to two decimal places
return(equilibrium)
}
# Model
model <- function(x){
S <- rmax*((tmax - temp)/(tmax - topt))*((temp/topt)^(topt/(tmax - topt)))*x[5]/(x[5] + nr)*(i0*exp(-a*pmax*z)/(i0*exp(-a*pmax*z) + ir))*x[1] - x[1]*(ms + ma + mh*hmax*sh/(sh + x[1]))
CA <- alpha*h*pmax*(1 - (hmax*sh/(sh + x[1]))/(hmax*sh/(sh + x[1]) + hp)) - x[2]*(phida*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp)) + (hmax*sh/(sh + x[1]))/(hmax*sh/(sh + x[1]) + hea) + 1/(1+exp(-fb1*(x[2] + x[3] - fb2))))
CS <- beta*x[1]*(ms + mh*hmax*sh/(sh + x[1])) - x[3]*(phids*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp)) + (hmax*sh/(sh + x[1]))/(hmax*sh/(sh + x[1]) + hes) + 1/(1+exp(-fb1*(x[2] + x[3] - fb2))))
CB <- x[2]*1/(1+exp(-fb1*(x[2] + x[3] - fb2))) + x[3]*1/(1+exp(-fb1*(x[2] + x[3] - fb2))) - (1-ma*da)*x[4]*phidb*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp)) - ma*da*x[4]*(phida+phids)/2*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp))
N <- i + gamma*(x[2]*phida*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp)) + x[3]*phids*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp)) + (1-ma*da)*x[4]*phidb*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp)) + ma*da*x[4]*(phida+phids)/2*1/(exp(-ea/(8.314*td)))*exp(-ea/(8.314*temp))) - delta*(rmax*((tmax - temp)/(tmax - topt))*((temp/topt)^(topt/(tmax - topt)))*x[5]/(x[5] + nr)*(i0*exp(-a*pmax*z))/(i0*exp(-a*pmax*z) + ir))*x[1]-l*x[5]
c(S = S, CA = CA, CS = CS, CB = CB, N = N)
}
rmax <- 0.011
ms <- 0.0014
topt <- 298.85
tmax <- 307.05
nr <- 0.015
i0 <- 709
ir <- 296
sh <- 22.7
hp <- 0.023
a <- 0.07
mh <- 0.028
alpha <- 0.194
h <- 0.68
phida <- 0.024
phids <- 0.00024
phidb <- 0.00005
ea <- 58000
r <- 8.314
td <- 303.65
hea <- 12.53
hes <- 12.53
fb1 <- 0.0022
fb2 <- 1335
beta <- 0.292
gamma <- 0.137
delta <- 0.052
l <- 0.01
da <- 0.125/6
z <- 10
temp <- 298.85
hmax <- 0.15
pmax <- 0.5
ma <- 0
i <- 0.005865335
# multisolve parameters
iv1_max <- 5000
iv2_max <- 5
iv3_max <- 5
iv4_max <- 5
iv5_max <- 0.1
upper_limit <- c(iv1_max, iv2_max, iv3_max, iv4_max, iv5_max)
lower_limit <- c(10, 0, 0, 0, 0)
iter <- 2
########################################################
N <- 5000
params <- c(
"rmax", "topt", "tmax", "l", "nr", "i0", "ir", "hp", "a", "mh", "alpha", "h", "phida", "phids", "phidb", "ea", "hea", "hes", "fb1", "fb2", "beta", "gamma", "delta", "ms", "td", "da"
)
order <- "first"
R <- 1000
#true_R <- 50
type <- "norm"
conf <- "0.95"
mat <- sobol_matrices(N = N, params = params, order = order)
per <- 0.05
ranges <- list(
rmax = c(0.011*(1-per), 0.011*(1+per)),
topt = c(297.565, 300.135),
tmax = c(305.355, 308.745),
nr = c(0.015*(1-per), 0.015*(1+per)),
i0 = c(709*(1-per), 709*(1+per)),
ir = c(296*(1-per), 296*(1+per)),
hp = c(0.023*(1-per), 0.023*(1+per)),
a = c(0.07*(1-per), 0.07*(1+per)),
mh = c(0.028*(1-per), 0.028*(1+per)),
alpha = c(0.194*(1-per), 0.194*(1+per)),
h = c(0.68*(1-per), 0.68*(1+per)),
phida = c(0.024*(1-per), 0.024*(1+per)),
phids = c(0.00024*(1-per), 0.00024*(1+per)),
phidb = c(0.00005*(1-per),0.00005*(1+per)),
ea = c(58000*(1-per), 58000*(1+per)),
hea = c(12.53*(1-per), 12.53*(1+per)),
hes = c(12.53*(1-per), 12.53*(1+per)),
fb1 = c(0.0022*(1-per), 0.0022*(1+per)),
fb2 = c(1335*(1-per), 1335*(1+per)),
beta = c(0.292*(1-per), 0.292*(1+per)),
gamma = c(0.137*(1-per), 0.137*(1+per)),
delta = c(0.052*(1-per), 0.052*(1+per)),
l = c(0.01*(1-per), 0.01*(1+per)),
ms = c(0.0014*(1-per), 0.0014*(1+per)),
td = c(302.125, 305.175),
da = c(0.125/6*(1-per), 0.125/6*(1+per))
)
for (param in names(ranges)) {
mat[, param] <- qunif(mat[, param], ranges[[param]][1], ranges[[param]][2])
}
full.dt <- read.csv("ld_healthy.csv")
#SEAGRASS
indices.dt <- melt(data.table(full.dt), measure.vars = c("CB"))
indices.dt <- indices.dt[, c(-2,-3,-4,-5)]
ind <- sobol_indices(Y = indices.dt$value, N = N, params = params, boot = TRUE, first = "jansen", R = R, parallel = "multicore", ncpus = 8)
cols <- colnames(ind$results)[1:5]
ind$results[, (cols):= round(.SD, 3), .SDcols = (cols)]
ind.dummy <- sobol_dummy(Y = indices.dt$value, N = N, params = params, boot = TRUE, R=R)
plot_enrichment <- plot_scatter(data = mat, N = N, Y = indices.dt$value, params = params)
ggsave("plot_enrichment.png",
plot_enrichment,
width = 5, height = 3)
ggsave("plot_enrichment.png",
plot_enrichment,
width = 5, height = 5)
ggsave("plot_enrichment.png",
plot_enrichment,
width = 7, height = 5)
ggsave("plot_enrichment.png",
plot_enrichment,
width = 8, height = 5)
ggsave("plot_enrichment.png",
plot_enrichment,
width = 7, height = 6)
ggsave("plot_enrichment.png",
plot_enrichment,
width = 8, height = 6)
ggsave("plot_enrichment.png",
plot_enrichment,
width = 10, height = 6)
ggsave("plot_enrichment.png",
plot_enrichment,
width = 10, height = 8)
